// ========================================
// KONTAKT MANAGER - JAVASCRIPT
// Schnupperlehre Applikationsentwickler EFZ
// 3 Stunden Programmieraufgabe
// ========================================

console.log("üöÄ Kontakt Manager wird geladen...");

// ========================================
// 1. GLOBALE VARIABLEN
// ========================================

let contacts = []; // Array f√ºr alle Kontakte
let editingContactId = null; // ID des aktuell bearbeiteten Kontakts

// ========================================
// 2. DOM ELEMENTE REFERENZIEREN
// ========================================

const contactForm = document.getElementById('contactForm');
const contactsList = document.getElementById('contactsList');
const emptyState = document.getElementById('emptyState');
const contactCount = document.getElementById('contactCount');
const searchBox = document.getElementById('searchBox');
const submitBtn = document.getElementById('submitBtn');

// ========================================
// 3. BEISPIEL KONTAKTE (zum Testen)
// ========================================

const exampleContacts = [
    {
        id: 1,
        name: "Arlind Bekjiri",
        email: "arlind.bekjiri@gmail.com",
        phone: "079 123 45 67",
        company: "TechFirma AG"
    },
    {
        id: 2,
        name: "Mehmet Dere",
        email: "mehmet.dere@firma.ch",
        phone: "079 987 65 43",
        company: "StartUp GmbH"
    },
    {
        id: 3,
        name: "Gabriele Logiurato",
        email: "sarah@webdesign.ch",
        phone: "079 456 78 90",
        company: "Creative Studio"
    }
];

// ========================================
// EURE PROGRAMMIER-AUFGABEN (TODOs)
// ========================================

// ----------------------------------------
// TODO 1: KONTAKTE LADEN ‚≠ê
// ----------------------------------------
// Aufgabe: Kontakte aus localStorage laden, sonst Beispieldaten verwenden
function loadContacts() {
    console.log("üìÇ TODO 1: Kontakte laden...");

    // TIPPS:
    // - localStorage.getItem('contacts') um gespeicherte Daten zu holen
    // - JSON.parse() um Text zur√ºck in JavaScript-Array zu wandeln
    // - Falls null/undefined, dann exampleContacts verwenden

    // ‚úèÔ∏è DEINE L√ñSUNG:
     const savedContacts = localStorage.getItem("contacts");
     if (savedContacts) {
         contacts = JSON.parse(savedContacts);
     } else {
         contacts = exampleContacts;
     }
     console.log(contacts)
    console.log("‚ùå TODO 1 noch nicht implementiert!");
}

// ----------------------------------------
// TODO 2: KONTAKTE ANZEIGEN ‚≠ê‚≠ê
// ----------------------------------------
// Aufgabe: Alle Kontakte als HTML-Karten darstellen
function displayContacts(contactsToShow = contacts) {
    console.log("üñºÔ∏è TODO 2: Kontakte anzeigen...");

    // TIPPS:
    // - contactsList.innerHTML = '' zum Leeren der Liste
    // - contactsToShow.forEach() um durch Array zu gehen
    // - Template Literals `<div>${variable}</div>` f√ºr HTML
    // - data-id="${contact.id}" f√ºr die Buttons ist wichtig!

    // HTML-Struktur Beispiel:
    // <div class="contact-card">
    //   <div class="contact-header">
    //     <div>
    //       <div class="contact-name">NAME</div>
    //       <div class="contact-info">
    //         <p>üìß EMAIL</p>
    //         <p>üì± PHONE</p>
    //         <p>üè¢ COMPANY</p>
    //       </div>
    //     </div>
    //     <div class="contact-actions">
    //       <button class="btn btn-edit" data-id="ID">Bearbeiten</button>
    //       <button class="btn btn-delete" data-id="ID">L√∂schen</button>
    //     </div>
    //   </div>
    // </div>

    // ‚úèÔ∏è DEINE L√ñSUNG:
    contactsList.innerHTML = '';

    contactsToShow.forEach(contact => {

    const contactCard = `
        <div class="contact-card" >
       <div class="contact-header">
        <div>
       <div class="contact-name">${contact.name}</div>
          <div class="contact-info">
         <p>üìß ${contact.email}</p>
            <p>üì±${contact.phone || 'keine Nummer'}</p>
            <p>üè¢${contact.company || 'Keine Firma'} </p>
          </div>
         </div>
         <div class="contact-actions">
           <button class="btn btn-edit" data-id="${contact.id}">Bearbeiten</button>
           <button class="btn btn-delete" data-id="${contact.id}">L√∂schen</button>
        </div>
       </div>
     </div>
`;
    contactsList.innerHTML += contactCard;

    });

    toggleEmptyState();

    console.log("‚ùå TODO 2 noch nicht implementiert!");

    }

// ----------------------------------------
// TODO 3: KONTAKT ERSTELLEN ‚≠ê‚≠ê
// ----------------------------------------
// Aufgabe: Neuen Kontakt aus Formular-Daten erstellen
function createContact(contactData) {
    console.log("‚ûï TODO 3: Kontakt erstellen...", contactData);

    // TIPPS:
    // - Date.now() f√ºr eindeutige ID verwenden
    // - Neues Objekt mit id, name, email, phone, company erstellen
    // - contacts.push() um zum Array hinzuzuf√ºgen
    // - saveContacts(), displayContacts(), updateContactCount() aufrufen

    // ‚úèÔ∏è DEINE L√ñSUNG:
     const newContact = {
         id: Date.now(),
         name: contactData.name,
         email: contactData.email,
         phone: contactData.phone,
        company: contactData.company
     };
     contracts.push(newContract);

     saveContacts();
     displayContacts();
     updateContacts();

     console.log("Kontakt erstellt:",newContact.name);

    console.log("‚ùå TODO 3 noch nicht implementiert!");
}

// ----------------------------------------
// TODO 4: KONTAKT AKTUALISIEREN ‚≠ê‚≠ê
// ----------------------------------------
// Aufgabe: Bestehenden Kontakt bearbeiten
function updateContact(id, contactData) {
    console.log("üìù TODO 4: Kontakt aktualisieren...", id, contactData);

    // TIPPS:
    // - contacts.find() um den richtigen Kontakt zu finden
    // - Vergleich: c => c.id == id
    // - Eigenschaften des gefundenen Kontakts √ºberschreiben
    // - saveContacts(), displayContacts(), updateContactCount() aufrufen

    // ‚úèÔ∏è DEINE L√ñSUNG:
    const contact = contacts.find(contact => contact.id== id)
    if(contact){
    contact.name = contactData.name;
    contact.email = contactData.email;
    contact.phone = contactData.phone;
    contact.company = contactData.company;

    saveContacts();
    displayContacts();
    updateContacts();

    console.log("Kontakt aktualisiert",contact.name);
    } else {
    console.log("Kontakt nicht gefunden mit ID:", id);
    }
    }   
    







    console.log("‚ùå TODO 4 noch nicht implementiert!");


// ----------------------------------------
// TODO 5: KONTAKT L√ñSCHEN ‚≠ê‚≠ê
// ----------------------------------------
// Aufgabe: Kontakt aus Array entfernen
function deleteContact(id) {
    console.log("üóëÔ∏è TODO 5: Kontakt l√∂schen...", id);

    // TIPPS:
    // - contacts.filter() erstellt neues Array ohne den zu l√∂schenden Kontakt
    // - Bedingung: contact => contact.id != id (alle au√üer diesem behalten)
    // - saveContacts(), displayContacts(), updateContactCount() aufrufen

    // ‚úèÔ∏è DEINE L√ñSUNG:
    const contactToDelete = contacts.find(contact => contact.id == id);
    const contactName = contactToDelete ? contactToDelete.name : "Unbekannt";

    contacts = contacts.filter(contact => contact.id != id);

    saveContacts();
    displayContacts();
    updateContacts();

    console.log("Kontakt gel√∂scht:", contactName);
    }










    console.log("‚ùå TODO 5 noch nicht implementiert!");


// ----------------------------------------
// TODO 6: KONTAKTE SPEICHERN ‚≠ê
// ----------------------------------------
// Aufgabe: Kontakte dauerhaft im Browser speichern
function saveContacts() {
    console.log("üíæ TODO 6: Kontakte speichern...");

    // TIPPS:
    // - JSON.stringify() wandelt JavaScript-Array in Text um
    // - localStorage.setItem() speichert im Browser
    // - Key: 'contacts', Value: JSON String

    // ‚úèÔ∏è DEINE L√ñSUNG:
    
    localStorage.setltem(`contacts`, JSON.stringify(contacts));
    console.log("Kontakte gespeichert:", contacs.lenght);


    console.log("‚ùå TODO 6 noch nicht implementiert!");
}

// ----------------------------------------
// TODO 7: KONTAKT-ANZAHL ANZEIGEN ‚≠ê
// ----------------------------------------
// Aufgabe: Status-Bar mit aktueller Anzahl aktualisieren
function updateContactCount() {
    console.log("üî¢ TODO 7: Kontakt-Anzahl aktualisieren...");

    // TIPPS:
    // - contacts.length f√ºr die Anzahl
    // - contactCount.textContent zum Setzen des Textes
    // - Singular/Plural beachten: 1 Kontakt vs. 2 Kontakte

    // ‚úèÔ∏è DEINE L√ñSUNG:
    









    console.log("‚ùå TODO 7 noch nicht implementiert!");
}

// ----------------------------------------
// TODO 8: FORMULAR SUBMIT EVENT ‚≠ê‚≠ê‚≠ê
// ----------------------------------------
// Aufgabe: Wenn Formular abgeschickt wird, Kontakt erstellen/bearbeiten
contactForm.addEventListener('submit', function(e) {
    console.log("üìù TODO 8: Form Submit Event...");

    // TIPPS:
    // - e.preventDefault() verhindert Seiten-Reload
    // - new FormData(contactForm) holt alle Formular-Daten
    // - formData.get('name') f√ºr spezifische Felder
    // - editingContactId pr√ºfen: null = neu erstellen, sonst bearbeiten
    // - createContact() oder updateContact() aufrufen
    // - Formular zur√ºcksetzen mit contactForm.reset() oder resetForm()

    // ‚úèÔ∏è DEINE L√ñSUNG:

    console.log("‚ùå TODO 8 noch nicht implementiert!");
});

// ----------------------------------------
// TODO 9: SUCHFUNKTION ‚≠ê‚≠ê‚≠ê
// ----------------------------------------
// Aufgabe: Kontakte in Echtzeit durchsuchen
searchBox.addEventListener('input', function(e) {
    console.log("üîç TODO 9: Suche...");

    // TIPPS:
    // - e.target.value f√ºr den eingegebenen Suchbegriff
    // - .toLowerCase() f√ºr Gro√ü-/Kleinschreibung ignorieren
    // - contacts.filter() um passende Kontakte zu finden
    // - string.includes(suchbegriff) pr√ºft ob Text enthalten
    // - || f√ºr "oder" um mehrere Felder zu durchsuchen
    // - displayContacts(gefilterte_kontakte) zum Anzeigen

    // ‚úèÔ∏è DEINE L√ñSUNG:

    console.log("‚ùå TODO 9 noch nicht implementiert!");
});

// ----------------------------------------
// TODO 10: EDIT/DELETE BUTTONS ‚≠ê‚≠ê‚≠ê‚≠ê
// ----------------------------------------
// Aufgabe: Auf Edit/Delete Button-Klicks reagieren (schwierigste Aufgabe!)
contactsList.addEventListener('click', function(e) {
    console.log("üñ±Ô∏è TODO 10: Button geklickt...");

    // TIPPS f√ºr Edit Button:
    // - e.target.classList.contains('btn-edit') pr√ºft CSS-Klasse
    // - e.target.dataset.id holt die data-id vom HTML
    // - parseInt() wandelt Text in Zahl um
    // - contacts.find() um Kontakt zu finden
    // - fillForm(contact) f√ºllt das Formular (schon programmiert!)
    // - editingContactId setzen und Submit-Button Text √§ndern

    // TIPPS f√ºr Delete Button:
    // - e.target.classList.contains('btn-delete') pr√ºfen
    // - confirm() zeigt Sicherheitsabfrage
    // - deleteContact(id) aufrufen falls best√§tigt

    // ‚úèÔ∏è DEINE L√ñSUNG:

    console.log("‚ùå TODO 10 noch nicht implementiert!");
});

// ========================================
// HILFSFUNKTIONEN (schon programmiert!)
// ========================================

// Formular zur√ºcksetzen
function resetForm() {
    contactForm.reset();
    editingContactId = null;
    submitBtn.textContent = 'Kontakt hinzuf√ºgen';
    console.log("üîÑ Formular zur√ºckgesetzt");
}

// Formular mit Kontakt-Daten f√ºllen
function fillForm(contact) {
    document.getElementById('name').value = contact.name || '';
    document.getElementById('email').value = contact.email || '';
    document.getElementById('phone').value = contact.phone || '';
    document.getElementById('company').value = contact.company || '';
    console.log("üìù Formular gef√ºllt mit:", contact.name);
}

// Leeren Zustand ein/ausblenden
function toggleEmptyState() {
    if (contacts.length === 0) {
        emptyState.style.display = 'block';
    } else {
        emptyState.style.display = 'none';
    }
}

// ========================================
// BONUS AUFGABEN (f√ºr Schnelle!)
// ========================================

// BONUS 1: Sortierung nach Name
function sortContacts() {
    console.log("üî§ BONUS: Sortierung...");
    // TIPP: contacts.sort((a, b) => a.name.localeCompare(b.name))
}

// BONUS 2: Export als JSON-Datei
function exportContacts() {
    console.log("üì§ BONUS: Export...");
    // TIPP: Blob und URL.createObjectURL() verwenden
}

// BONUS 3: Validation (Email-√úberpr√ºfung)
function validateEmail(email) {
    console.log("‚úÖ BONUS: Validation...");
    // TIPP: email.includes('@') && email.includes('.')
    return true; // Placeholder
}

// BONUS 4: Kategorien hinzuf√ºgen
function addCategory() {
    console.log("üìÇ BONUS: Kategorien...");
    // TIPP: Select-Dropdown im HTML hinzuf√ºgen
}

// BONUS 5: Dark Mode
function toggleDarkMode() {
    console.log("üåô BONUS: Dark Mode...");
    // TIPP: CSS Custom Properties und classList.toggle()
}

// ========================================
// PROGRAMM STARTEN
// ========================================

document.addEventListener('DOMContentLoaded', function() {
    console.log("üéØ Kontakt Manager gestartet!");
    console.log("üìã TODOs f√ºr heute:");
    console.log("1. ‚≠ê loadContacts() - Daten laden");
    console.log("2. ‚≠ê‚≠ê displayContacts() - Kontakte anzeigen");
    console.log("3. ‚≠ê‚≠ê createContact() - Neuen Kontakt erstellen");
    console.log("4. ‚≠ê‚≠ê updateContact() - Kontakt bearbeiten");
    console.log("5. ‚≠ê‚≠ê deleteContact() - Kontakt l√∂schen");
    console.log("6. ‚≠ê saveContacts() - Speichern im Browser");
    console.log("7. ‚≠ê updateContactCount() - Anzahl anzeigen");
    console.log("8. ‚≠ê‚≠ê‚≠ê Form Submit Event - Formular handling");
    console.log("9. ‚≠ê‚≠ê‚≠ê Suchfunktion - Live-Suche");
    console.log("10. ‚≠ê‚≠ê‚≠ê‚≠ê Edit/Delete Events - Button-Klicks");
    console.log("üöÄ Viel Erfolg beim Programmieren!");
    console.log("üí° Vergiss nicht: F12 ‚Üí Console f√ºr Debugging!");

    // Diese Funktionen werden aufgerufen, sobald ihr sie programmiert habt:
    loadContacts();
    displayContacts();
});